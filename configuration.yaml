homeassistant:
  auth_providers:
    - type: homeassistant
  name: !secret home_name
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  elevation: !secret home_elevation
  unit_system: metric
  temperature_unit: C
  time_zone: Europe/Paris
  country: FR

# Integration, users, history, etc.
config:
recorder:
  db_url: !secret mariadb_url
  purge_keep_days: 32
  include: !include history_include.yaml
history:
logbook:
  include: !include history_include.yaml
logger:
  default: warning
  logs:
    homeassistant.components.shell_command: debug

# Mobile app for notifications
mobile_app:

# Home Assistant "My Button" for integration redirections
my:

# Sunset and sunrise time
sun:

# Frontend config (see ./ui-lovelace.yaml)
frontend:
lovelace:
  mode: yaml

# System health report
system_health:

sensor:
  # Vigicrue (flood monitoring)
  - platform: rest
    name: rest_vigicrue_hydro_observation
    resource: !secret rest_vigicrue_hydro_observation_url
    method: !secret rest_vigicrue_hydro_observation_method
    value_template: '{{value_json.Serie.ObssHydro[-1].ResObsHydro}}'
    json_attributes_path: Serie
    json_attributes:
      - CdStationHydro
      - LbStationHydro
    scan_interval: 900
    state_class: measurement
    unit_of_measurement: m
    device_class: distance

  # Internet Healthcheck
  - platform: rest
    resource: !secret healthcheck_internet_url
    name: healthcheck_internet
    method: GET
    timeout: 10
    scan_interval: 30
    value_template: '{{value}}'

  # EDF tempo
  - platform: rest
    resource_template: >-
      https://api-commerce.edf.fr/commerce/activet/v1/calendrier-jours-effacement?option=TEMPO&dateApplicationBorneInf={{ now().strftime('%Y-%m-%d') }}&dateApplicationBorneSup={{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }}&identifiantConsommateur=src
    name: edf_tempo_now
    method: GET
    scan_interval: 300
    json_attributes_path: "$.content.options[0].calendrier"
    json_attributes:
      - dateApplication
      - statut
    value_template: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  - platform: rest
    resource_template: >-
      https://api-commerce.edf.fr/commerce/activet/v1/saisons/search?option=TEMPO&dateReference={{ now().strftime('%Y-%m-%d') }}
    name: edf_tempo_days
    method: GET
    scan_interval: 300
    json_attributes_path: "$.content"
    json_attributes:
      - typeJourEff
      - nombreJours
      - nombreJoursTires
    value_template: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  # Aircraft info
  - platform: rest
    resource_template: >-
      {% if states('sensor.aircraft_callsign') != "unknown" %}
        https://www.flightaware.com/live/flight/{{ states('sensor.aircraft_callsign') }}
      {% endif %}
    name: aircraft_info
    method: GET
    scan_interval: 86400
    value_template: >-
      {% set trackpoll_match = value | regex_findall('var trackpollBootstrap = ({.*?});') %}
      {% if trackpoll_match %}
        {% set trackpoll_data = trackpoll_match[0] | from_json %}
        {% set flights = trackpoll_data.flights %}
        {% if flights %}
          {% set first_flight_key = flights.keys() | list | first %}
          {% if first_flight_key %}
            {% set first_flight = flights[first_flight_key] %}
            {% if first_flight.activityLog and first_flight.activityLog.flights %}
              {{ first_flight.activityLog.flights[0].destination | to_json }}
            {% elif first_flight.destination %}
              {{ first_flight.destination | to_json }}
            {% else %}
              null
            {% endif %}
          {% else %}
            null
          {% endif %}
        {% else %}
          null
        {% endif %}
      {% else %}
        null
      {% endif %}

command_line:
    # Raspberry Pi CPU temperature
  - sensor:
      name: rasp_temperature
      command: 'cat /sys/class/thermal/thermal_zone0/temp'
      value_template: '{{value | multiply(0.001) | round}}'
      scan_interval: 900
      unit_of_measurement: Â°C

timer:
  dryer1:
    duration: '00:45:00'
    icon: mdi:tumble-dryer
  dryer2:
    duration: '01:05:00'
    icon: mdi:tumble-dryer
  dryer3:
    duration: '02:00:00'
    icon: mdi:tumble-dryer

# Shell commands
shell_command:
  netatmo_ftp_clean_up: bash /config/shell/netatmo_ftp_clean_up.sh
  dropbox_sync: bash /config/shell/dropbox_sync.sh / 10

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
template: !include templates.yaml
