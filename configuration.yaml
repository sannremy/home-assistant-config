homeassistant:
  auth_providers:
    - type: homeassistant
  name: !secret home_name
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  elevation: !secret home_elevation
  unit_system: metric
  temperature_unit: C
  time_zone: Europe/Paris
  country: FR

# Integration, users, history, etc.
config:
history:
  include: !include history_include.yaml
recorder:
  db_url: !secret mariadb_url
  purge_keep_days: 32
  include: !include history_include.yaml
logbook:
  include: !include history_include.yaml

# Mobile app for notifications
mobile_app:

# Sunset and sunrise time
sun:

# Frontend config (see ./ui-lovelace.yaml)
frontend:
lovelace:
  mode: yaml

# System health report
system_health:

# Philips Hue
hue:
  bridges:
    - host: !secret hue_host
      allow_hue_groups: false
      allow_unreachable: true

# Wait for implementation on RPi + sniffing codes (https://github.com/ninjablocks/433Utils)
# switch:
#   - platform: rpi_rf
#     gpio: 0 # todo
#     switches:
#       outlet_1:
#         code_on: 11111 # todo
#         code_off: 00000 # todo
#       outlet_2:
#         code_on: 11111 # todo
#         code_off: 00000 # todo

sensor:
  # Google Travel Time (trip durations)
  - platform: google_travel_time
    api_key: !secret google_travel_time_api_key
    name: google_travel_time_destination_1
    origin: !secret google_travel_time_origin_home
    destination: !secret google_travel_time_destination_1
    scan_interval: 900
    options:
      mode: driving
      departure_time: now
      avoid: tolls
  # Vigicrue (flood monitoring)
  - platform: rest
    name: rest_vigicrue_hydro_observation
    resource: !secret rest_vigicrue_hydro_observation_url
    method: !secret rest_vigicrue_hydro_observation_method
    value_template: '{{value_json.Serie.ObssHydro[-1].ResObsHydro}}'
    json_attributes_path: Serie
    json_attributes:
      - CdStationHydro
      - LbStationHydro
    scan_interval: 300
    state_class: measurement
    unit_of_measurement: m
    device_class: distance

  # Transilien (trains)
  # - platform: rest
  #   name: rest_transilien_search
  #   resource: !secret rest_transilien_search_url
  #   method: !secret rest_transilien_search_method
  #   payload: !secret rest_transilien_search_payload
  #   headers:
  #     Content-Type: application/json
  #   value_template: '{{value_json.nextTrainsList[0].departureTime}}'
  #   json_attributes:
  #     - nextTrainsList
  #   scan_interval: 60
  # Suez (water consumption)
  - platform: suez_water
    username: !secret suez_water_consumption_username
    password: !secret suez_water_consumption_password
    counter_id: !secret suez_water_consumption_counter_id
  # Raspberry Pi CPU temperature
  - platform: command_line
    name: rasp_temperature
    command: 'cat /sys/class/thermal/thermal_zone0/temp'
    value_template: '{{value | multiply(0.001) | round}}'
    scan_interval: 900
    unit_of_measurement: Â°C
  - platform: rest
    resource: !secret healthcheck_ping_url
    name: healthcheck_ping
    method: GET
    timeout: 10
    scan_interval: 30
    value_template: '{{value}}'

binary_sensor:
  - platform: ping
    host: !secret home_ip_addr
    count: 2
    scan_interval: 10
    name: internet_connection

timer:
  laundry1:
    duration: '01:30:00'
    icon: mdi:washing-machine
  laundry2:
    duration: '02:00:00'
    icon: mdi:washing-machine
  dryer1:
    duration: '00:45:00'
    icon: mdi:tumble-dryer
  dryer2:
    duration: '01:20:00'
    icon: mdi:tumble-dryer
  dryer3:
    duration: '03:00:00'
    icon: mdi:tumble-dryer

# Shell commands
shell_command:
  netatmo_ftp_clean_up: bash /config/shell/netatmo_ftp_clean_up.sh
  r7000_backup: bash /config/shell/r7000_backup.sh {{ credentials }} {{ router_ip }}
  dropbox_sync: "bash /config/shell/dropbox_sync.sh /backup / 10 > /var/log/dropbox_sync.log 2>&1"

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
